#!/usr/bin/env python3
"""
Example usage of replace_position_zero_variant.py

This script demonstrates how to use the image replacement functionality.
"""

from replace_position_zero_variant import (
    process_image_replacement_with_redshift,
    process_batch_with_workers,
    load_image_ids_from_file
)
import sys


def batch_image_replacement_with_workers():
    """
    Multi-threaded batch processing with hardcoded image IDs
    """
    # List of image IDs to process
    image_ids = [
1354291,1354293,1354294,1354295,1392754,1392756,1392757,1392758,1392759,1392760,1392762,1392764,1392766,1328883,1328884,1328885,1328886,1456883,1449490,1435424,1508654,1448700,1506532,1456850,1456918,1554342,1612627,1534639,1440246,1582369,1439184,1520631,1580531,811951,1434053,1614251,1317305,1446346,1388644,1425818,1498701,1260039,593351,754319,1316285,1506586,1462811,1465627,1423416,1439257,1562026,1103254,1509682,1490460,1233228,1233226,1233227,1233225,1233432,1233433,1233434,1233435,1244671,1244672,1260042,1376535,1376536,1376537,1376538,1376539,1376540,1380307,1380308,1380309,1398870,1398871,1398872,1398873,1399740,1399741,1399742,1399743,1399744,1042978,1473361,1532931,996425,1380166,1462759,1399825,1249312,1490538,1357424,1315423,1579231,1439042,1641137,1075710,1635138,1464049,1472799,1629716,1366560,1083052,1431098,1317263,1079379,1635131,1231527,1562477,1563932,1498585,970672,1326561,1542649,1330965,1367243,1437636,1373529,1319287,1302376,1330709,1450071,1497548,1368124,1313539,875562,1334379,1549542,1372793,1561623,1499689,1532049,970679,1332704,1409586,1317266,1507704,1532269,1450598,1616385,1272539,1071876,1363394,1490524,1380310,1340208,1313536,1328982,1266739,1079842,1537860,1580548,1314328,1465808,1059853,1402584,1198650,1038126,1348748,1444773,1295004,1429289,1490496,1336471,1444926,1294594,1441581,1284078,805408,1313242,1396021,1224234,1297531,1060321,1386916,1542524,1467694,1381839,763761,1060825,1176685,1343937,1352014,1446886,1219568,1291726,829399,1319372,1441900,1224380,1254609,1581242,1504150,1644498,1282597,1441748,1178212,1354790,1497479,1702684,1702712,1702713,1702717,1702726,1702731,1702730,1702738,1702746,1702752,1702759,1702764,1702778,1560663,1454942,1487033,1458431,1505590,1520933,1577846,733495,732832,1475416,1391309,1462844,737154,834963,1492880,814470,1379822,1489898,1465541,1360487,1240445,1036998,1441810,1389915,1507970,807143,1582388,1364972,1555301,1380512,1431954,1579246,1172387,1520089,1478742,1347201,1332769,620244,1397143,1310235,1464838,694836,1466728,1539221,1030887,994762,1254776,1072417,1465527,1410598,1315847,699481,1201193,1533542,1398298,1490434,1269054,1428956,1462852,1431760,1457425,1504886,1430741,1454122,1453042,1457349,1450870,849034,849035,849036,1272830,1614737,1030895,1574231,1560864,1373888,1087044,1030881,1464461,1538534,1326295,1451400,999307,1536726,839875,1254667,1592768,1030897,1489978,1108954,1252948,1457204,1198476,1234643,1243743,1514969,1456940,1659510,1695236,1695253,1695330,1590546,1526073,1530235,1439193,1452754,732258,1445016,1465625,1441567,1438828,1441518,1534674,1344059,1352198,1504327,1330677,1457435,1232964,1380306,1330732,1375083,1396046,1579237,1283452,1464770,1534601,1219817,1464434,713099,1103329,1132463,511408,1372924,1465616,1457365,1175239,1335961,1037651,1614780,727414,1316499,4036136,1520117,1380362,757397,1316256,1507363,1462881,1539684,1560430,1579257,1598247,1542231,804083,1345524,1610857,1411542,1332727,1030867,1030889,1070829,1318853,1614973,1579256,1549570,1461369,1446471,870199,951618,1513206,1392735,1433053,1310946,694196,1579234,1118493,803375,1549550,1336051,1343945,1507187,1425613,825703,707630,1579233,1111340,1442278,1394418,1411940,813079,1465681,1436532,1336623,805622,822738,1294797,1545852,826455,951488,1464708,1335371,1451332,1032966,815075,606384,1347141,1384809,1336177,951553,1457102,1330701,1441922,1565909,715405,1570837,1569421,951545,1260349,1434242,1474151,1565326,1394151,1471199,1528786,1520182,1283228,1230624,1474371,1457249,1459878,1457014,1432617,1423733,1469138,1391772,1413651,1325125,606949,1391153,1382060,1059819,1261108,1490482,1398869,1240923,1602297,1254714,1320329,1296972,1392769,1030876,1544333,1107771,1107772,1107773,1370674,1179418,1179419,1412906,779965,1416504,1408622,1528594,1071771,1467044,1150322,1570798,1459644,1281936,1399253,1298561,1398855,1469070,1360705,1537833,1352013,1062669,1532369,1354269,1457084,1439201,1498621,1530267,1363504,1508611,1579249,1432948,1499402,1315302,1489904,1172391,1465613,510057,861727,1338413,1497667,1398006,597734,1092051,1446316,1223085,1507912,1507744,1030891,831530,1336187,1244114,1283718,1094864,1345531,1269141,1397870,1336176,827655,1198234,1542661
    ]
    
    if not image_ids:
        print("⚠️ No image IDs specified!")
        print("Edit the image_ids list in this function to add your image IDs.")
        return
    
    # Process with 25 workers (adjust as needed)
    result = process_batch_with_workers(
        image_ids=image_ids,
        max_workers=25,
        update_redshift=True
    )
    
    return result


def batch_from_file():
    """
    Process image IDs loaded from a file
    """
    print("Available file formats:")
    print("- CSV with 'image_id' column")
    print("- Excel with 'image_id' column") 
    print("- Text file with one image ID per line")
    print()
    
    file_path = input("Enter file path: ").strip()
    
    try:
        # Load image IDs from file
        image_ids = load_image_ids_from_file(file_path)
        
        if not image_ids:
            print("No valid image IDs found in file!")
            return
        
        # Ask for number of workers
        workers_input = input(f"Number of workers (default: 25): ").strip()
        max_workers = int(workers_input) if workers_input.isdigit() else 25
        
        # Process the batch
        result = process_batch_with_workers(
            image_ids=image_ids,
            max_workers=max_workers,
            update_redshift=True
        )
        
        return result
        
    except Exception as e:
        print(f"Error processing file: {e}")
        return None


if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "batch-workers":
            batch_image_replacement_with_workers()
        elif command == "batch-file":
            batch_from_file()
        elif command.isdigit():
            # Process single image ID passed as argument
            image_id = int(sys.argv[1])
            print(f"Processing image ID from command line: {image_id}")
            result = process_image_replacement_with_redshift(image_id, update_redshift=True)
            if result['success']:
                print(f"✅ Successfully processed image {image_id}")
                if result.get('redshift_updated'):
                    print("✅ Redshift status updated")
                else:
                    print("⚠️ Redshift status not updated")
            else:
                print(f"❌ Failed to process image {image_id}: {result['error']}")
        else:
            print("Usage:")
            print("  python example_usage.py [image_id]     # Process single image")
            print("  python example_usage.py batch-workers  # Process batch (multi-threaded)")
            print("  python example_usage.py batch-file     # Process batch from file")
    else:
        print("Usage:")
        print("  python example_usage.py [image_id]     # Process single image")
        print("  python example_usage.py batch-workers  # Process batch (multi-threaded)")
        print("  python example_usage.py batch-file     # Process batch from file") 